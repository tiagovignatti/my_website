<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>X - Tag - Tiago Vignatti</title>
        <link>https://vignatti.com/tags/x/</link>
        <description>X - Tag - Tiago Vignatti</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 29 Dec 2010 19:46:07 &#43;0000</lastBuildDate><atom:link href="https://vignatti.com/tags/x/" rel="self" type="application/rss+xml" /><item>
    <title>late Christmas gift: freedesktop&#39;s Xorg for MeeGo</title>
    <link>https://vignatti.com/posts/late-christmas-gift-freedesktops-xorg-for-meego/</link>
    <pubDate>Wed, 29 Dec 2010 19:46:07 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://vignatti.com/posts/late-christmas-gift-freedesktops-xorg-for-meego/</guid>
    <description><![CDATA[<p>Moikka.</p>
<p>If you follow <a href="http://gitorious.org/meego-w40" target="_blank" rel="noopener noreffer">here</a> [0] you will see a set of Debian packages that Graphics team at Nokia are continuously working to deploy a X11 implementation for <a href="http://wiki.meego.com/Glossary#M" target="_blank" rel="noopener noreffer">MeeGo-Harmattan</a>, where we target embedded systems only. Feel free to use it!</p>
<hr>
<p>At this point, we are very proud of ourselves because 99% of the content on these repositories are based on the ones at X main-stream of development. IWO we are directly fetching the X code-base from freedesktop.org. More important, we are shaping freedesktop implementation for embedded devices. So at this moment, we are pretty much aligned with X version 1.9.2, plus a few of other commits from master branch; the rest of components, like client side libraries, are mostly what we have on freedesktop master also.</p>]]></description>
</item><item>
    <title>X Census (for 1.9)</title>
    <link>https://vignatti.com/posts/x-census-for-1-9/</link>
    <pubDate>Thu, 02 Sep 2010 13:41:11 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://vignatti.com/posts/x-census-for-1-9/</guid>
    <description><![CDATA[<p>Topic&rsquo;s name is a funny (and friendly) devotion to <a href="http://blogs.gnome.org/bolsh/2010/07/28/gnome-census/" target="_blank" rel="noopener noreffer">GNOME Census</a>. So let&rsquo;s take a look at some numbers from the time <a href="http://wiki.x.org/wiki/Server19Branch" target="_blank" rel="noopener noreffer">Xorg 1.9 was in development</a> - raw data is <a href="http://people.freedesktop.org/~vignatti/xdevelopment/" target="_blank" rel="noopener noreffer">here</a>.</p>
<p>Would be unfair to measure only the work that happened e.g. in X server or in the drivers being developed and come up with the statistics about &ldquo;who developed X&rdquo;. X and X development community are quite extensive and don&rsquo;t concern only &ldquo;graphics&rdquo; related, i.e., pixel information that appears on your display screen. This is a very common mistake.</p>]]></description>
</item><item>
    <title>Scrutinizing X memory, part 2: what&#39;s taking all that memory?</title>
    <link>https://vignatti.com/posts/scrutinizing-x-memory-part-2-whats-taking-all-that-memory/</link>
    <pubDate>Thu, 25 Mar 2010 18:01:10 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://vignatti.com/posts/scrutinizing-x-memory-part-2-whats-taking-all-that-memory/</guid>
    <description><![CDATA[<p>So here goes some statistics of the Xorg process running. All the informations were fetch from /proc/<code>pidof Xorg</code>/{smaps, status}. I used also a <a href="http://wingolog.org/pub/mem_usage.py" target="_blank" rel="noopener noreffer">script</a> found on the <a href="http://wingolog.org/archives/2007/11/27/reducing-the-footprint-of-python-applications" target="_blank" rel="noopener noreffer">Web</a> to parse and organize these informations; Mikhail Gusarov has <a href="http://github.com/dottedmag/mem-usage" target="_blank" rel="noopener noreffer">extended</a> this script to show a very useful <a href="http://people.freedesktop.org/~vignatti/scrutinizing-x-mem/x-standalone-memory-per-libraries.txt" target="_blank" rel="noopener noreffer">output</a>.</p>
<h3 id="xorg-per-se">Xorg per se</h3>
<p>Running just one standalone <code>Xorg -retro</code>. In my system it represents:
VmRSS:      5440 kB
VmSize:    13620 kB</p>
<p>from those 5440 kB of RSS:
3404 kB (63 %) come from code
1628 kB (30 %) come from malloc/mmap in anonymous memory (heap)
228 kB  (4 %) come from other data mapped in memory
180 kB  (3 %) come from rodata</p>]]></description>
</item><item>
    <title>Scrutinizing X Memory, part 1: overview</title>
    <link>https://vignatti.com/posts/scrutinizing-x-memory-part-1-overview/</link>
    <pubDate>Thu, 25 Mar 2010 17:58:47 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://vignatti.com/posts/scrutinizing-x-memory-part-1-overview/</guid>
    <description><![CDATA[<p>This series of documents explore how the memory is used by the Xorg server. They aim to eventually shrinks the memory footprint of the server and its related components, like X clients, modules being loaded and drivers. Embedded devices with constrained resources are the main focus here. All texts are mostly based on x86 and ARM architectures, under Linux 2.6.33 with Xorg from upstream.</p>
<h3 id="overview">Overview</h3>
<p>One way to analyse aspects of memory usage of a given program is to scrutinize its object data. Object data contains executable code and static data. Both are of little interest from the process memory management point of view given their layout is determined by the compiler and does not change during process execution. However, we can deduce some nice informations about the object. For instance, from Xorg object we are able to get some statistics about the code, identify its structure and point out architectural mistakes just looking into.</p>]]></description>
</item><item>
    <title>Nokia, FI...</title>
    <link>https://vignatti.com/posts/nokia-fi/</link>
    <pubDate>Fri, 12 Jun 2009 07:06:59 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://vignatti.com/posts/nokia-fi/</guid>
    <description><![CDATA[<p>&hellip; here I&rsquo;am :)</p>]]></description>
</item><item>
    <title>multiseat - roadmap</title>
    <link>https://vignatti.com/posts/multiseat-roadmap/</link>
    <pubDate>Tue, 23 Sep 2008 04:52:08 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://vignatti.com/posts/multiseat-roadmap/</guid>
    <description><![CDATA[<p>This week our laboratory at university <a href="http://lists.freedesktop.org/archives/xorg/2008-September/038674.html" target="_blank" rel="noopener noreffer">released</a> the <a href="http://cgit.freedesktop.org/xorg/app/mdm/" target="_blank" rel="noopener noreffer">MDM</a> utility to ease the process of installation and configuration of a multiseat box. The idea is that the end-user should not use some boring and hard howtos anymore to deploy it. Just installing a distro package must be enough now. Try it, use it, report the bugs and send the patches! :)</p>
<p>But I would like to call attention here because we&rsquo;re still relying on the <a href="http://www.c3sl.ufpr.br/multiterminal/howtos/howto-xephyr-en.htm" target="_blank" rel="noopener noreffer">ugly Xephyr solution</a> to build the multiseat on a simple PC machine (there are people selling this solution. Sigh). A lot of cool stuffs arriving in the linux graphics stack are lacking with this solution. So lets try trace the roadmap here that we can follow in the short/medium-term to build a good one solution:</p>]]></description>
</item><item>
    <title>Improving input latency</title>
    <link>https://vignatti.com/posts/improving-input-latency/</link>
    <pubDate>Wed, 30 Jul 2008 01:09:31 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://vignatti.com/posts/improving-input-latency/</guid>
    <description><![CDATA[<p>GSoC summary #1 - July 29</p>
<p>The current implementation of X Window System relies in a signal scheme  to manage the input event coming from hardware devices. This scheme  frequently get blocked when lot of IO is occurring (for instance, when  the process is swapping in/out). Get blocked means for instance a  jumping cursor on the screen and in GUI is always desirable to  prioritize the system responsiveness for end users. The human/computer  interface should be smooth and this is the most user visible aspect of a  system.</p>]]></description>
</item><item>
    <title>Google Summer of Code 2008</title>
    <link>https://vignatti.com/posts/google-summer-of-code-2008/</link>
    <pubDate>Tue, 29 Apr 2008 21:31:27 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://vignatti.com/posts/google-summer-of-code-2008/</guid>
    <description><![CDATA[<p>I&rsquo;m very happy to say that I was selected <strong>again</strong> to work on Google Summer of Code with X.Org Foundation. <a href="http://www.fooishbar.org/blog" target="_blank" rel="noopener noreffer">Daniel</a> will be my mentor again. Thanks Google. Thanks X.Org!</p>
<p>In the last year we did a nice work separating the input event generation code of the X server into a different thread. We saw some performance improvement there specially because the implementation is not using signals anymore to wake up the server when some device emits an event. The reason why is that when a process is in the uninterruptible sleep (D state) signals are delayed and the mouse cursor lags.</p>]]></description>
</item></channel>
</rss>
